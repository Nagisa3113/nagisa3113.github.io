皆さん、こんにちは。
本日は私が取り組んだ技術課題について発表させていただきます。

## 目次

本発表は以下の3つのパートで構成されています

- 共通課題
- 個別課題
- 感想

それでは、最初に共通課題からご紹介します。

## 共通課題

**『The Book of Shaders』** で描画システム、シェーダーの基礎知識などの内容を理解し

その上で、WebGLで実装されているいくつかの機能を、Unreal Engine移植することです。

Unreal Engineで**ブループリントノード**や**HLSL**で同じ効果を再現しました。

そして、独自のエフェクト制作で、「色・回転・形・速度」などのパラメータを調整して、流星群のエフェクトを作成しました。


次は制作中でいくつの問題点を紹介したいを思います。

こうしたパラメータを手軽に扱えるように、**Material Function**を使ってテンプレート化することを提案しました。

作業を進める中で、複数の星を生成したいと思ったのですが、ノードベースの仕組みでは**For文が使えない**という制約がありました。
 そこで、**Custom Node**方法を選びました。

### 次の問題

しかし、Custom Nodeには**関数の宣言ができない**という制約もありました。

調べた結果、通常の関数は使えませんが、**Struct構造体内であれば関数が使える**ことが分かりました。

### さらに

ところが、Custom Nodeは個別にコードがコンパイルされるため、関数の**共有ができない**という問題が生じました。
 そのため、**同じ関数を毎回書き直す必要があり**、作業効率が大きく落ちてしまいました。

### 解決策

調査の結果、以下の2つの方法を見つけました。

- **Include File Paths**（USFファイル）を活用する
- 少し裏技的な手法（次のスライドで紹介します）

この裏技は中鉢さんに教えていただいたもので、Custom Nodeのコードが**そのままシェーダーファイルに挿入される**という仕組みを利用しています。

例えば、左の波かっこ `{` を省略して、`return 0;` のみを記述し、右の `}` も書かない形にします。
 こうすると、UEのコンパイラはそのコードをそのまま関数定義として挿入してくれるため、Custom Nodeでも通常の関数が使えるようになります。
 この方法は非常に実用的だと思います。

## 個別課題

私はBoids（群れの行動シミュレーション）を用いて、Unreal Engineの**Niagara System**で魚群のエフェクトを制作しました。

このテーマを選んだ理由は

自然現象のシミュレーションに興味があり、また、美しいビジュアル表現を作ってみたいと思ったからです。

### 成果物の紹介：Boidsとは

Boidsは、自然界に見られる**集団行動を模倣**するアルゴリズムで、以下の3つの原則に基づいています。

- **Separation（分離）**：衝突を避けるために距離を保つ
- **Alignment（整列）**：群れ全体が同じ方向へ動く
- **Cohesion（結合）**：離れている個体が仲間の中心に向かって移動する

### 実装とシミュレーションの流れ

最初は、Niagaraで魚をシーン内に**ランダム配置**しました。
 一定時間が経つとBoidsのルールに従い、安定した移動パターンが形成されます,基本的に円形の軌跡きせきになります。

この状態でシーン内のオブジェクトを動かすと、魚群はそれを避けて**新しいパターン**ができました。
 つまり、環境に応じたリアルタイムな反応が可能になります。

### 工夫したこと①：自然な挙動の実現

Niagaraの基本を学びながら、公式Exampleを参考にブループリントとHLSLを組み合わせてBoidsアルゴリズムを実装しました。
 「分離距離」や「力の強さ」など多くのパラメータを調整し、より自然な魚群の動きを目指しました。

また、魚が上下方向にあまり動かないことや、突然止まったり急加速しないように制御しています。
 さらに、魚は**視界内の個体だけを認識し、背後は無視する**ように設計しました。

### 工夫したこと②：パフォーマンス

パーティクル数が多いため、**Neighbor Grid 3D**で空間を分割し、周囲の個体だけを計算するようにしました。
 これにより計算を抑え、パフォーマンスが向上しました。

また、デバッグ用に**可視化機能**も実装しました。

### 問題点①：障害物が認識されない

壁に透明マテリアルを使うと障害物として認識されなくなりました。
これは、透明マテリアルで**Depth Writeが無効**になっているためです。

#### 解決策

壁を「透明」と「不透明」の2種類のマテリアルに分け、不透明の方は「Render in Main Pass」と「Render in Depth Pass」をOFFにすることで解決しました。
ただ、もっとスマートな方法があるのではないかと感じています。

### 問題点②：スクリーン外のパーティクルが消える

カメラ移動で画面外に出たパーティクルが消える問題がありました。
これは**GPUシミュレーションのEmitterではBoundingが自動設定されない**ことが原因です（CPUシミュレーションは自動設定されます）。

#### 解決策

Boundingの範囲を手動で設定して対処しました。


### 今後の展望

- 魚の種類を増やし、より多様で生き生きとした表現を目指す
- 一定時間ごとに**ランダム要素**を加え、群れの動きに変化を持たせる（現在は動きが安定すると単調になりがち）
- 光や泡などの**ビジュアルエフェクト**を追加し、画面全体のクオリティをさらに高める


### 補足

使用したアセット（魚、岩、植物などのメッシュ）：
 **Ocean Environment Pack | Fab**


## 感想

ビジュアルシステムを通じて、アイデアを形にできる点がとても魅力的でした。

特にNiagaraは機能でパラメータも豊富なため、試行錯誤しながら調整していく過程が非常に面白かったです。

実装で悩んだ際は、トレーナーの方に相談しながら最適な方法を探ることで、多くの学びがありました。

好きなことに取り組んでいると、本当に時間があっという間に過ぎてしまいますね。

最後に、トレーナーの皆様からのご指導いただき、本当に感謝しております。
